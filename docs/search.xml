<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用的快捷键</title>
      <link href="/shortcut/"/>
      <url>/shortcut/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一些常用的快捷键</p></blockquote><span id="more"></span><h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><ul><li>截屏: Shift、Command 和 3</li><li>部分截屏: Shift、Command 和 4</li></ul><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><ul><li>复制: yy</li><li>粘贴: p</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用命令</title>
      <link href="/command/"/>
      <url>/command/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下常用的命令</p></blockquote><span id="more"></span><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>环境变量设置: <code>export &lt;name&gt;=&lt;value&gt;</code></li><li>打印最尾的日志: <code>tail -f &lt;file&gt; # -f 循环读取</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NVM 安装</title>
      <link href="/nvm/"/>
      <url>/nvm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Node Version Manager</p></blockquote><span id="more"></span><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p><a href="https://github.com/nvm-sh/nvm#installing-and-updating">https://github.com/nvm-sh/nvm#installing-and-updating</a></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ul><li>设置默认 Node 版本: <code>nvm alias default &lt;version&gt;</code></li><li>安装最新 Node 版本: <code>nvm install node</code></li><li>选择指定 Node 版本: <code>nvm which node</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> NVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编写 Makefile 文件</title>
      <link href="/makefile/"/>
      <url>/makefile/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如何编写 Makefile 文件</p></blockquote><span id="more"></span><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class="line">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure><ul><li>target: 目标</li><li>prerequisites: 前置条件</li><li>commands: 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &lt;target&gt;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2015/02/make.html">Make 命令教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Q&amp;A</title>
      <link href="/question/"/>
      <url>/question/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下日常开发中遇到的问题</p></blockquote><span id="more"></span><h6 id="VSCode-安装-Go-第三方报-timeout-错误？"><a href="#VSCode-安装-Go-第三方报-timeout-错误？" class="headerlink" title="VSCode 安装 Go 第三方报 timeout 错误？"></a>VSCode 安装 Go 第三方报 timeout 错误？</h6><p>在设置里面配置 HTTP 代理，代理地址在 ShadowsocksX-NG 偏好设置 HTTP 标签页查看<br><em>Mac</em></p><h6 id="VSCode-扩展-Vim-无法长按键盘键？"><a href="#VSCode-扩展-Vim-无法长按键盘键？" class="headerlink" title="VSCode 扩展 Vim 无法长按键盘键？"></a>VSCode 扩展 Vim 无法长按键盘键？</h6><p>终端执行 <code>defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false</code>，重启 VSCode<br><em>Mac</em></p><h6 id="Go全局包执行报-command-not-found-错误？"><a href="#Go全局包执行报-command-not-found-错误？" class="headerlink" title="Go全局包执行报 command not found 错误？"></a>Go全局包执行报 command not found 错误？</h6><p>将全局包安装路径赋值给 PATH 变量，如 <code>export PATH=$PATH:/Users/everchan/go/bin</code><br><em>Mac</em></p><h6 id="zsh-配置文件？"><a href="#zsh-配置文件？" class="headerlink" title="zsh 配置文件？"></a>zsh 配置文件？</h6><p>在用户目录下面的 .zshrc 文件，没有则创建</p><h6 id="编辑-PAC-用户自定义规则？"><a href="#编辑-PAC-用户自定义规则？" class="headerlink" title="编辑 PAC 用户自定义规则？"></a>编辑 PAC 用户自定义规则？</h6><p>格式: <code>!!&lt;domain&gt;</code></p><h4 id="bash-短横线-含义？"><a href="#bash-短横线-含义？" class="headerlink" title="bash 短横线 - 含义？"></a>bash 短横线 - 含义？</h4><p>表示标准输出，或从标准输出中获得输入</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可能会提高百分之一开发效率的小技巧</title>
      <link href="/improve-develop-efficiency/"/>
      <url>/improve-develop-efficiency/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们平时写代码的过程中，常规操作无外乎就是编写实际的业务逻辑、保存文件、编译和运行程序、查看结果。由于我们并不能保证一次性就能把程序写好，所以正常的过程时写一部分代码，然后运行程序，看看结果是否正常，再接着继续写。这样也就导致我们需要反复在编辑框和终端之间来回切换，在编辑框写代码，在终端运行程序。这其中会有很多重复的操作，需要我们每次机械地执行。那么，什么办法可以避免这些重复的操作呢？</p></blockquote><span id="more"></span><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>仔细梳理一下上述过程的操作，其中，只有写代码是需要我们思考的操作，而保存文件、编译和运行程序基本是不变的操作。<br>所以只要我们把不变的操作自动化，只在一开始执行，后续就不再操作就行了。那么怎么让这些操作自动化呢？接下来我们实践一下。</p><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><p>目前流行的编辑器或者 IDE 基本都提供自动保存的功能。<br>拿 VSCode 来说，在设置里面，搜索 auto save，可以看见两个选项：</p><ol><li>是否开启启动保存</li><li>延迟多久后自动保存</li></ol><p>默认配置是 1s，所以，只要我们开启这个功能之后，后续 VSCode 在我们没有操作 1s 后会自动保存。</p><p><img src="/improve-develop-efficiency/auto-save.png"></p><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><p>编译和运行一般在我们保存文件后操作。所以，只要我们能够监听到文件变化，重新运行一下编译和运行命令就行。<br>这里不需要去实现一个监听文件的程序，监听文件是一个比较常见的功能，主流的编程语言一般都会有相关的库实现，如 Go 的 reflex 库。<br>假设我们使用 Make 工具来构建程序，那里利用 reflex 库监听文件变化然后运行的命令可以是 <code>reflex -r &#39;\.go&#39; make</code></p><h2 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h2><p>在日常开发中，我会把编辑器分为三个区域，分别为编辑区、编译区和运行区（编辑区是文本框、编译区和运行区是两个终端），如下图所示。</p><p><img src="/improve-develop-efficiency/runtime.png"></p><p>编辑区就是写代码的区域，编译区是查看编译日志的区域，运行区则是查看运行时输出日志的区域。<br>开始写代码的时候，我会在编译区输入编译和运行命令，如 <code>make</code>，在运行区输入查看日志的命令 <code>tail -f log</code>。<br>在后续的开发中，我只需要专注在编辑区写代码。当编译有问题的时候，编译区会报错；当调试代码的时候，在运行区可以查看程序的输出日志。这样再也不用反反复复在写代码和运行程序的过程切换来切换去了。</p><h2 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h2><p>最后，我们把上述用到的命令写到 Makefile 文件里面，免得每次都要记住命令。<br>这里一共有四个 target，分别为：</p><ol><li>default（默认执行的，这里执行 reflex）</li><li>run（程序运行命令）</li><li>reflex（监听文件变化然后重新运行程序）</li><li>tail（打印 log 文件命令）</li></ol><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">default: reflex</span></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">go run main.go &gt;&gt; log</span><br><span class="line"><span class="section">reflex:</span></span><br><span class="line">reflex -r &#x27;\.go&#x27; make run </span><br><span class="line"><span class="section">tail:</span></span><br><span class="line">tail -f log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thinking in code</title>
      <link href="/thinking-in-code/"/>
      <url>/thinking-in-code/</url>
      
        <content type="html"><![CDATA[<ul><li>架构整洁之道</li><li>软件设计哲学</li><li>代码大全</li><li>修改代码的艺术</li><li>编写可读代码的艺术</li><li>敏捷软件开发——原则、模式与实践</li><li>重构——改善既有代码的设计</li><li>代码整洁之道</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go map</title>
      <link href="/go-map/"/>
      <url>/go-map/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/algorithm/"/>
      <url>/algorithm/</url>
      
        <content type="html"><![CDATA[<p>收集一些数据结构和算法相关的资源，方便之后的学习</p><span id="more"></span><ul><li>算法导论</li><li>算法</li><li>数据结构与算法分析: C语言描述</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/js/"/>
      <url>/js/</url>
      
        <content type="html"><![CDATA[<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li><a href="https://google.github.io/styleguide/jsguide.html">Google JS Style Guide</a></li><li><a href="https://google.github.io/styleguide/tsguide.html">Google TS Style Guide</a></li><li><a href="http://effectivejs.com/">Effective JS</a></li><li><a href="https://effectivetypescript.com/">Effective TS</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>primitive obsession</title>
      <link href="/primitive-obsession/"/>
      <url>/primitive-obsession/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go struct implement interface</title>
      <link href="/go-struct-implement-interface/"/>
      <url>/go-struct-implement-interface/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">编译结果</th><th align="center">结构体实现接口</th><th align="center">结构体指针实现接口</th></tr></thead><tbody><tr><td align="center">结构体初始化变量</td><td align="center">通过</td><td align="center">不通过</td></tr><tr><td align="center">结构体指针初始化变量</td><td align="center">通过</td><td align="center">通过</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ducker 鸭子类型</span></span><br><span class="line"><span class="keyword">type</span> Ducker <span class="keyword">interface</span> &#123;</span><br><span class="line">Quack()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cat cat</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack cat quack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> Quack() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;cat quack&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog dog</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quack dog duack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span></span> Quack() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;dog quack&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 第一种情况，结构体初始化变量，结构体实现接口</span></span><br><span class="line"><span class="keyword">var</span> c1 Ducker = Cat&#123;&#125;</span><br><span class="line">c1.Quack()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种情况，结构体指针初始化变量，结构体实现接口</span></span><br><span class="line"><span class="keyword">var</span> c2 Ducker = &amp;Cat&#123;&#125;</span><br><span class="line">c2.Quack()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种情况，结构体初始化变量，结构体指针实现接口</span></span><br><span class="line"><span class="comment">// compiler</span></span><br><span class="line"><span class="comment">// cannot use (Dog literal) (value of type Dog) as Ducker value in variable declaration:</span></span><br><span class="line"><span class="comment">// missing method Quack (Quack has pointer receiver)</span></span><br><span class="line"><span class="comment">// var d1 Ducker = Dog&#123;&#125;</span></span><br><span class="line"><span class="comment">// d1.Quack()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四种情况，结构体指针初始化变量，结构体指针实现接口</span></span><br><span class="line"><span class="keyword">var</span> d2 Ducker = &amp;Dog&#123;&#125;</span><br><span class="line">d2.Quack()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>结构体指针初始化变量，结构体实现接口时，能够通过指针隐式地获取到指向的结构体</li><li>结构体初始化变量，结构体指针实现接口时，变量缺少指针指向它</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B">Go 语言接口原理</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go unit test db</title>
      <link href="/go-unit-test-db/"/>
      <url>/go-unit-test-db/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pkg/errors&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Settle 结算系统接口</span></span><br><span class="line"><span class="keyword">type</span> Settle <span class="keyword">interface</span> &#123;</span><br><span class="line">GetSettleItem(id <span class="type">int</span>) (*SettleItem, <span class="type">error</span>)</span><br><span class="line">GetSettleRule(id <span class="type">int</span>) (*SettleRule, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// settle 结算系统接口实现</span></span><br><span class="line"><span class="keyword">type</span> settle <span class="keyword">struct</span> &#123;</span><br><span class="line">db *gorm.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SettleItem 结算项</span></span><br><span class="line"><span class="keyword">type</span> SettleItem <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="type">int</span>    <span class="string">`gorm:&quot;column:id&quot;`</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`gorm:&quot;column:name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableName 结算项表名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(SettleItem)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;t_settle_item&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SettleRule 结算规则</span></span><br><span class="line"><span class="keyword">type</span> SettleRule <span class="keyword">struct</span> &#123;</span><br><span class="line">ItemID <span class="type">int</span>     <span class="string">`gorm:&quot;column:item_id&quot;`</span></span><br><span class="line">Month  <span class="type">string</span>  <span class="string">`gorm:&quot;column:month&quot;`</span></span><br><span class="line">Price  <span class="type">float64</span> <span class="string">`gorm:&quot;column:price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableName 结算规则表面</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(SettleRule)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;t_settle_rule&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewSettle 创建实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSettle</span><span class="params">(db *gorm.DB)</span></span> Settle &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;settle&#123;db: db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSettleItem 根据 ID 获取结算项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *settle)</span></span> GetSettleItem(id <span class="type">int</span>) (*SettleItem, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> i SettleItem</span><br><span class="line"><span class="keyword">if</span> err := s.db.First(&amp;i, id).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;get settle item error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;i, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSettleRule 根据结算项 ID 获取结算规则</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *settle)</span></span> GetSettleRule(id <span class="type">int</span>) (*SettleRule, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> r SettleRule</span><br><span class="line"><span class="keyword">if</span> err := s.db.First(&amp;r, <span class="string">&quot;item_id = ?&quot;</span>, id).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;get settle rule error&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dsn := <span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">s := NewSettle(db)</span><br><span class="line">item, err := s.GetSettleItem(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main_test.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/pkg/errors&quot;</span></span><br><span class="line">. <span class="string">&quot;github.com/smartystreets/goconvey/convey&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/sqlite&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dbFile = <span class="string">&quot;./test.db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestMain 单测初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := InitSQLite(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := ExecSQLite(<span class="string">&quot;test.sql&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">code := m.Run()</span><br><span class="line"><span class="keyword">if</span> err := DelSQLite(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitSQLite init sqlite</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitSQLite</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := DelSQLite(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">db, err = gorm.Open(sqlite.Open(dbFile), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;init sqlite error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := db.AutoMigrate(&amp;SettleItem&#123;&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;init sqlite error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := db.AutoMigrate(&amp;SettleRule&#123;&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;init sqlite error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExecSQLite 根据 sql 文件执行 sql 语句</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExecSQLite</span><span class="params">(sqlFile <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(sqlFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;exec sqlite error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">s := <span class="type">string</span>(data)</span><br><span class="line"><span class="keyword">if</span> err := db.Exec(s).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;exec sqlite error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DelSQLite 删除 db 文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelSQLite</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(dbFile); os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">err := os.Remove(dbFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;del sqlite error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewSettle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">Convey(<span class="string">&quot;NewSettle&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj := NewSettle(db)</span><br><span class="line">So(obj, ShouldNotBeNil)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_settle_GetSettleItem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">Convey(<span class="string">&quot;GetSettleItem&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj := NewSettle(db)</span><br><span class="line">i, err := obj.GetSettleItem(<span class="number">1</span>)</span><br><span class="line">So(err, ShouldBeNil)</span><br><span class="line">So(i.Name, ShouldEqual, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">Convey(<span class="string">&quot;GetSettleItem not found&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj := NewSettle(db)</span><br><span class="line">_, err := obj.GetSettleItem(<span class="number">2</span>)</span><br><span class="line">So(errors.Is(err, gorm.ErrRecordNotFound), ShouldEqual, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_settle_GetSettleRule</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">Convey(<span class="string">&quot;GetSettleRule&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj := NewSettle(db)</span><br><span class="line">i, err := obj.GetSettleRule(<span class="number">1</span>)</span><br><span class="line">So(err, ShouldBeNil)</span><br><span class="line">So(i.Price, ShouldEqual, <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">Convey(<span class="string">&quot;GetSettleRule not found&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj := NewSettle(db)</span><br><span class="line">_, err := obj.GetSettleRule(<span class="number">2</span>)</span><br><span class="line">So(errors.Is(err, gorm.ErrRecordNotFound), ShouldEqual, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_settle_item` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_settle_rule` (`item_id`, `<span class="keyword">month</span>`, `price`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;202109&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go fix line too long</title>
      <link href="/go-fix-line-too-long/"/>
      <url>/go-fix-line-too-long/</url>
      
        <content type="html"><![CDATA[<h2 id="常见的行太长类型"><a href="#常见的行太长类型" class="headerlink" title="常见的行太长类型"></a>常见的行太长类型</h2><ul><li>参数过多</li><li>字符串太长</li><li>判断条件太多</li><li>链式调用太长</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// argument too long</span></span><br><span class="line">arg1 := <span class="string">&quot;argument one&quot;</span></span><br><span class="line">arg2 := <span class="string">&quot;argument two&quot;</span></span><br><span class="line">arg3 := <span class="string">&quot;argument three&quot;</span></span><br><span class="line">arg4 := <span class="string">&quot;argument four&quot;</span></span><br><span class="line">arg5 := <span class="string">&quot;argument five&quot;</span></span><br><span class="line">arg6 := <span class="string">&quot;argument six&quot;</span></span><br><span class="line">arg7 := <span class="string">&quot;argument seven&quot;</span></span><br><span class="line">fmt.Println(arg1, arg2, arg3, arg4, arg5, arg6, arg7)</span><br><span class="line"><span class="comment">// fix</span></span><br><span class="line">fmt.Println(</span><br><span class="line">arg1,</span><br><span class="line">arg2,</span><br><span class="line">arg3,</span><br><span class="line">arg4,</span><br><span class="line">arg5,</span><br><span class="line">arg6,</span><br><span class="line">arg7,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// string too long</span></span><br><span class="line">sql := <span class="string">&quot;SELECT id, name, info FROM t_user user LEFT JOIN t_info info ON user.id = info.user_id where name != &#x27;&#x27;&quot;</span></span><br><span class="line">fmt.Println(sql)</span><br><span class="line"><span class="comment">// fix</span></span><br><span class="line">sql = <span class="string">`</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">  id,</span></span><br><span class="line"><span class="string">  name,</span></span><br><span class="line"><span class="string">  info</span></span><br><span class="line"><span class="string">FROM</span></span><br><span class="line"><span class="string">  t_user user</span></span><br><span class="line"><span class="string">  LEFT JOIN t_info info ON user.id = info.user_id</span></span><br><span class="line"><span class="string">where</span></span><br><span class="line"><span class="string">  name != &#x27;&#x27;</span></span><br><span class="line"><span class="string">  and info != &#x27;&#x27;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">fmt.Println(sql)</span><br><span class="line"><span class="comment">// or fix</span></span><br><span class="line">sql = <span class="string">&quot;SELECT id, name, info FROM t_user user &quot;</span> +</span><br><span class="line"><span class="string">&quot;LEFT JOIN t_info info ON user.id = info.user_id &quot;</span> +</span><br><span class="line"><span class="string">&quot;where name != &#x27;&#x27; and info != &#x27;&#x27;&quot;</span></span><br><span class="line">fmt.Println(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if condition too long</span></span><br><span class="line"><span class="keyword">if</span> arg1 == arg2 &amp;&amp; arg2 == arg3 &amp;&amp; arg3 == arg4 &amp;&amp; arg4 == arg5 &amp;&amp; arg5 == arg6 &amp;&amp; arg6 == arg7 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;pass&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fix</span></span><br><span class="line"><span class="keyword">if</span> arg1 == arg2 &amp;&amp;</span><br><span class="line">arg2 == arg3 &amp;&amp;</span><br><span class="line">arg3 == arg4 &amp;&amp;</span><br><span class="line">arg4 == arg5 &amp;&amp;</span><br><span class="line">arg5 == arg6 &amp;&amp;</span><br><span class="line">arg6 == arg7 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;pass&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function chain call too long</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(<span class="string">&quot;&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">db.Table(<span class="string">&quot;table&quot;</span>).Select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;info&quot;</span>).Where(<span class="string">&quot;name != ? and info != ?&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>).Find(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// fix</span></span><br><span class="line">db.Table(<span class="string">&quot;table&quot;</span>).</span><br><span class="line">Select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;info&quot;</span>).</span><br><span class="line">Where(<span class="string">&quot;name != ? and info != ?&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>).</span><br><span class="line">Find(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">go run main.go</span><br><span class="line">argument one argument two argument three argument four argument five argument six argument seven</span><br><span class="line">argument one argument two argument three argument four argument five argument six argument seven</span><br><span class="line">SELECT <span class="built_in">id</span>, name, info FROM t_user user LEFT JOIN t_info info ON user.id = info.user_id <span class="built_in">where</span> name != <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">  <span class="built_in">id</span>,</span><br><span class="line">  name,</span><br><span class="line">  info</span><br><span class="line">FROM</span><br><span class="line">  t_user user</span><br><span class="line">  LEFT JOIN t_info info ON user.id = info.user_id</span><br><span class="line"><span class="built_in">where</span></span><br><span class="line">  name != <span class="string">&#x27;&#x27;</span></span><br><span class="line">  and info != <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">SELECT <span class="built_in">id</span>, name, info FROM t_user user LEFT JOIN t_info info ON user.id = info.user_id <span class="built_in">where</span> name != <span class="string">&#x27;&#x27;</span> and info != <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">2021/10/08 19:21:11 /Users/holtchen/Desktop/go/main.go:69</span><br><span class="line">[error] failed to initialize database, got error dial tcp 127.0.0.1:3306: connect: connection refused</span><br><span class="line">dial tcp 127.0.0.1:3306: connect: connection refused</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go doc</title>
      <link href="/go-doc/"/>
      <url>/go-doc/</url>
      
        <content type="html"><![CDATA[<h2 id="template-go"><a href="#template-go" class="headerlink" title="template.go"></a>template.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// License</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package doc 包内容描述</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Heading 标题一</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 描述一</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Heading 标题二</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 描述二</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Code Blocks</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;Hello, World&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Links</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// https://www.google.com</span></span><br><span class="line"><span class="keyword">package</span> doc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConstOne 常量一</span></span><br><span class="line"><span class="keyword">const</span> ConstOne = <span class="string">&quot;const one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConstTwo 常量二</span></span><br><span class="line"><span class="keyword">const</span> ConstTwo = <span class="string">&quot;const two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Const 集合</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ConstThree = <span class="string">&quot;const three&quot;</span></span><br><span class="line">ConstFour  = <span class="string">&quot;const four&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// VarOne 全局变量一</span></span><br><span class="line"><span class="keyword">var</span> VarOne = <span class="string">&quot;var one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// VarTwo 全局变量二</span></span><br><span class="line"><span class="keyword">var</span> VarTwo = <span class="string">&quot;var two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Var 变量集合</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">VarThree = <span class="string">&quot;var three&quot;</span></span><br><span class="line">VarFour  = <span class="string">&quot;var four&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Namer 获取名字</span></span><br><span class="line"><span class="keyword">type</span> Namer <span class="keyword">interface</span> &#123;</span><br><span class="line">GetName() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctionOne 函数一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FunctionOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;function one&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctionTwo 函数二</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FunctionTwo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;function two&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StructOne 结构体一</span></span><br><span class="line"><span class="keyword">type</span> StructOne <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewStructOne 创建结构体一实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStructOne</span><span class="params">()</span></span> *StructOne &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;StructOne&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetName 返回结构体名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(StructOne)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;StructOne&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StructTwo 结构体二</span></span><br><span class="line"><span class="keyword">type</span> StructTwo <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="example-test-go"><a href="#example-test-go" class="headerlink" title="example_test.go"></a>example_test.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> doc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 包示例一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example_one</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;example one&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// example one</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 包示例二</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example_two</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;example two&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// example two</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleNamer 接口示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleNamer</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;namer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleStructOne 结构体一示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleStructOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;const one&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleNewStructOne 函数示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleNewStructOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;new struct one&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleStructOne_GetName 方法示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleStructOne_GetName</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get name&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://elliotchance.medium.com/godoc-tips-tricks-cda6571549b">https://elliotchance.medium.com/godoc-tips-tricks-cda6571549b</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go error wrap</title>
      <link href="/go-error-wrap/"/>
      <url>/go-error-wrap/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPError http error struct</span></span><br><span class="line"><span class="keyword">type</span> HTTPError <span class="keyword">struct</span> &#123;</span><br><span class="line">Status <span class="type">int</span></span><br><span class="line">Msg    <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *HTTPError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;status: %d Message: %s&quot;</span>, h.Status, h.Msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHTTPError new http error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHTTPError</span><span class="params">(status <span class="type">int</span>, msg <span class="type">string</span>)</span></span> *HTTPError &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;HTTPError&#123;</span><br><span class="line">Status: status,</span><br><span class="line">Msg:    msg,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP error class</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrBadRequest     = NewHTTPError(<span class="number">400</span>, <span class="string">&quot;Bad Request&quot;</span>)</span><br><span class="line">ErrGatewayTimeout = NewHTTPError(<span class="number">503</span>, <span class="string">&quot;Gateway Timeout&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// API struct</span></span><br><span class="line"><span class="keyword">type</span> API <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewAPI new api</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAPI</span><span class="params">()</span></span> *API &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;API&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get api get</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *API)</span></span> Get() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;method get error: %w&quot;</span>, ErrBadRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Post api post</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *API)</span></span> Post() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;method post error: %w&quot;</span>, ErrGatewayTimeout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">api := NewAPI()</span><br><span class="line">err := api.Get()</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="comment">// check http error</span></span><br><span class="line"><span class="keyword">var</span> httpError *HTTPError</span><br><span class="line">fmt.Println(errors.As(err, &amp;httpError))</span><br><span class="line"><span class="comment">// check bad request</span></span><br><span class="line">fmt.Println(errors.Is(err, ErrBadRequest))</span><br><span class="line"><span class="comment">// unwrap</span></span><br><span class="line">fmt.Println(errors.Unwrap(err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Working with Errors in Go 1.13：<a href="https://go.dev/blog/go1.13-errors">https://go.dev/blog/go1.13-errors</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go error</title>
      <link href="/go-error/"/>
      <url>/go-error/</url>
      
        <content type="html"><![CDATA[<h2 id="template-go"><a href="#template-go" class="headerlink" title="template.go"></a>template.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// License</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package doc 包内容描述</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Heading 标题一</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 描述一</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Heading 标题二</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 描述二</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Code Blocks</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;Hello, World&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Links</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// https://www.google.com</span></span><br><span class="line"><span class="keyword">package</span> doc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConstOne 常量一</span></span><br><span class="line"><span class="keyword">const</span> ConstOne = <span class="string">&quot;const one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConstTwo 常量二</span></span><br><span class="line"><span class="keyword">const</span> ConstTwo = <span class="string">&quot;const two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Const 集合</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ConstThree = <span class="string">&quot;const three&quot;</span></span><br><span class="line">ConstFour  = <span class="string">&quot;const four&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// VarOne 全局变量一</span></span><br><span class="line"><span class="keyword">var</span> VarOne = <span class="string">&quot;var one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// VarTwo 全局变量二</span></span><br><span class="line"><span class="keyword">var</span> VarTwo = <span class="string">&quot;var two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Var 变量集合</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">VarThree = <span class="string">&quot;var three&quot;</span></span><br><span class="line">VarFour  = <span class="string">&quot;var four&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Namer 获取名字</span></span><br><span class="line"><span class="keyword">type</span> Namer <span class="keyword">interface</span> &#123;</span><br><span class="line">GetName() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctionOne 函数一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FunctionOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;function one&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctionTwo 函数二</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FunctionTwo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;function two&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StructOne 结构体一</span></span><br><span class="line"><span class="keyword">type</span> StructOne <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewStructOne 创建结构体一实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStructOne</span><span class="params">()</span></span> *StructOne &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;StructOne&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetName 返回结构体名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(StructOne)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;StructOne&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StructTwo 结构体二</span></span><br><span class="line"><span class="keyword">type</span> StructTwo <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="example-test-go"><a href="#example-test-go" class="headerlink" title="example_test.go"></a>example_test.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> doc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 包示例一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example_one</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;example one&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// example one</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 包示例二</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example_two</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;example two&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// example two</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleNamer 接口示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleNamer</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;namer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleStructOne 结构体一示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleStructOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;const one&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleNewStructOne 函数示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleNewStructOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;new struct one&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExampleStructOne_GetName 方法示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleStructOne_GetName</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get name&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://elliotchance.medium.com/godoc-tips-tricks-cda6571549b">https://elliotchance.medium.com/godoc-tips-tricks-cda6571549b</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go 百科</title>
      <link href="/go/"/>
      <url>/go/</url>
      
        <content type="html"><![CDATA[<p>收集一些 Go 相关的资料，方便之后的学习。</p><span id="more"></span><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul><li><a href="https://go.dev/tour/welcome/1">A Tour of Go</a></li><li><a href="https://go.dev/doc/">Go Documentation</a></li></ul><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li><a href="https://github.com/uber-go/guide/blob/master/style.md">Uber Go Style Guide</a></li><li><a href="https://go.dev/doc/effective_go">Effective Go</a></li><li><a href="https://github.com/golang/go/wiki/CommonMistakes">CommonMistakes</a></li><li><a href="https://github.com/golang/go/wiki/CodeReviewComments">CodeReviewComments</a></li><li><a href="https://go.dev/blog/all">The Go Blog</a></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><a href="https://quii.gitbook.io/learn-go-with-tests/meta/anti-patterns">Learn Go with tests - Anti-patterns</a></li><li><a href="https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/mocking">Learn Go with tests - Mocking</a></li><li><a href="https://testing.googleblog.com/2008/07/how-to-write-3v1l-untestable-code.html">Google Testing Blog - How to Write 3v1L, Untestable Code</a></li><li><a href="https://book.douban.com/subject/34429421/">Unit Testing</a></li><li><a href="https://book.douban.com/subject/25934516/">单元测试的艺术</a></li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li>gomock</li></ul><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><ul><li>ginkgo</li><li>gomega</li></ul><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ul><li><a href="https://book.douban.com/subject/27015617/">GO语言实战</a></li><li><a href="https://books.studygolang.com/gopl-zh/">Go语言圣经</a></li><li><a href="https://draveness.me/golang/">Go 语言设计与实现</a></li><li><a href="https://github.com/unknwon/the-way-to-go_ZH_CN">Go入门指南</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md">Go Web 编程</a></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><a href="https://golang.design/go-questions/">Go 程序员面试笔试宝典</a></li><li><a href="https://go.xargin.com/">Go 语言笔记</a></li><li><a href="https://github.com/lifei6671/interview-go">Golang 面试题搜集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/http/"/>
      <url>/http/</url>
      
        <content type="html"><![CDATA[<h1 id="文本协议"><a href="#文本协议" class="headerlink" title="文本协议"></a>文本协议</h1><ol><li>透明性</li></ol><ul><li>无需专门工具就可以很容易地读写和编辑文本流</li></ul><ol><li>可扩展性</li></ol><ul><li>二进制格式通常指定了给定值的分配位数，要扩展位数非常困难</li></ul><ol><li>互用性</li><li>存储&#x2F;事务处理的经济性</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>book</title>
      <link href="/book/"/>
      <url>/book/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>malloc</title>
      <link href="/malloc/"/>
      <url>/malloc/</url>
      
        <content type="html"><![CDATA[<ol><li>返回 n 个字节的连续内存区域的指针</li><li>在程序堆中动态地创建对象</li><li>如果没有足够的内存，则返回空指针</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>exec</title>
      <link href="/exec/"/>
      <url>/exec/</url>
      
        <content type="html"><![CDATA[<ol><li>装载一个新的程序，并将之转换到调用进程的内存空间</li><li>代码段、数据段、堆栈段被替代</li><li>保持原进程相同的进程 ID</li><li>程序计数器 PC 指向新程序的第一个指令</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>确定有限状态自动机</title>
      <link href="/dfa/"/>
      <url>/dfa/</url>
      
        <content type="html"><![CDATA[<p>在计算理论中，确定有限状态自动机或确定有限自动机是一个能实现状态转移的自动机。对于一个给定的属于该自动机的状态和一个属于该自动机字母表的字符，它都能根据事先给定的转移函数转移到下一个状态（这个状态可以是先前那个状态）。</p><span id="more"></span><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li>给定的状态集</li><li>给定的状态转移函数</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>确认开始状态</li><li>确认接受状态</li></ul><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ul><li>读取字符串，根据状态转移函数转移到下一个状态</li><li>如果无法转移到下一个状态，则提前终止，拒绝该字符串</li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ul><li>判断最终状态是否在接受状态中</li><li>如果在接受状态中，则接受该字符串</li><li>如果不在接受状态中，则拒绝该字符串</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang 优雅地使用函数类型实现接口</title>
      <link href="/golang-function-implement-interface/"/>
      <url>/golang-function-implement-interface/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golang 支持将函数定义为类型，类型又能实现接口，这样就可以让函数类型实现接口，这样有什么好处呢？我们可以从一个实际的场景来体会一下这种用法。</p></blockquote><span id="more"></span><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>假设我们需要一个基于 Web 实现的打招呼功能。<br>当有请求访问时，如果请求要求皮卡丘出来接待，它会回复：皮卡皮卡；<br>如果请求要求妙蛙种子出来接待，它会回复：种子种子；<br>如果请求没有任何要求，那么默认回复：Hello World！</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>先起一个 Web 服务</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.Handle(<span class="string">&quot;/&quot;</span>, http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  fmt.Fprintf(w, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">  &#125;))</span><br><span class="line">  log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义一个说话的接口</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sayer 定义说话的接口</span></span><br><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">Say() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义皮卡丘的结构体，并实现说话接口</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pikachu 皮卡丘</span></span><br><span class="line"><span class="keyword">type</span> Pikachu <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say 皮卡丘说话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Pikachu)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;皮卡 皮卡!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义妙蛙种子的结构体，并实现说话接口</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bulbasaur 妙蛙种子</span></span><br><span class="line"><span class="keyword">type</span> Bulbasaur <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say 妙蛙种子说话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bulbasaur)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;种子 种子!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现一个函数，用来默认响应请求</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SayFunc 说话的函数</span></span><br><span class="line"><span class="keyword">type</span> SayFunc <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Say SayFunc 实现 Sayer 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SayFunc)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultSay 默认说话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultSay</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义一个 map，基于表驱动的方式响应请求</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]Sayer&#123;</span><br><span class="line"><span class="string">&quot;pikachu&quot;</span>:   Pikachu&#123;&#125;,</span><br><span class="line"><span class="string">&quot;bulbasaur&quot;</span>: Bulbasaur&#123;&#125;,</span><br><span class="line"><span class="string">&quot;default&quot;</span>:   SayFunc(DefaultSay),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现处理请求的 handler</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http.Handle(<span class="string">&quot;/greet&quot;</span>, http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">query := r.URL.Query()</span><br><span class="line">who, ok := query[<span class="string">&quot;who&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;say: %s&quot;</span>, m[<span class="string">&quot;default&quot;</span>].Say())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, ok := m[who[<span class="number">0</span>]]; !ok &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;say: %s&quot;</span>, m[<span class="string">&quot;default&quot;</span>].Say())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s say: %s&quot;</span>, who[<span class="number">0</span>], m[who[<span class="number">0</span>]].Say())</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ol><li>完整代码</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]Sayer&#123;</span><br><span class="line"><span class="string">&quot;pikachu&quot;</span>:   Pikachu&#123;&#125;,</span><br><span class="line"><span class="string">&quot;bulbasaur&quot;</span>: Bulbasaur&#123;&#125;,</span><br><span class="line"><span class="string">&quot;default&quot;</span>:   SayFunc(DefaultSay),</span><br><span class="line">&#125;</span><br><span class="line">http.Handle(<span class="string">&quot;/greet&quot;</span>, http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">query := r.URL.Query()</span><br><span class="line">who, ok := query[<span class="string">&quot;who&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;say: %s&quot;</span>, m[<span class="string">&quot;default&quot;</span>].Say())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, ok := m[who[<span class="number">0</span>]]; !ok &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;say: %s&quot;</span>, m[<span class="string">&quot;default&quot;</span>].Say())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s say: %s&quot;</span>, who[<span class="number">0</span>], m[who[<span class="number">0</span>]].Say())</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sayer 定义说话的接口</span></span><br><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">Say() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayFunc 说话的函数</span></span><br><span class="line"><span class="keyword">type</span> SayFunc <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Say SayFunc 实现 Sayer 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SayFunc)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultSay 默认说话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultSay</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pikachu 皮卡丘</span></span><br><span class="line"><span class="keyword">type</span> Pikachu <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say 皮卡丘说话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Pikachu)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;皮卡 皮卡!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bulbasaur 妙蛙种子</span></span><br><span class="line"><span class="keyword">type</span> Bulbasaur <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Say 妙蛙种子说话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bulbasaur)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;种子 种子!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>从上述场景分析，我们定义了 Sayer 的接口，对于不同的招待对象，我们都得先定义结构体，然后用这个结构体实现 Sayer 接口。<br>例如皮卡丘和妙蛙种子，先定义 struct 再实现 Say 方法。<br>然而，有时候我们并不需要具体的对象，或者我们不在乎对象是谁，只需要有函数能满足处理即可，但是接口必须有类型才能实现，所以我们的代码可能写成这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Default1 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Default1)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Default2 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Default2)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]Sayer&#123;</span><br><span class="line"><span class="string">&quot;default1&quot;</span>:   Default1&#123;&#125;,</span><br><span class="line">    <span class="string">&quot;default2&quot;</span>:   Default2&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们把函数先定义为类型，然后函数实现接口，那么后续的函数实现就不需要再定义结构体了，只需要在使用的时候做下类型转换，例如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SayFunc 说话的函数</span></span><br><span class="line"><span class="keyword">type</span> SayFunc <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Say SayFunc 实现 Sayer 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SayFunc)</span></span> Say() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default1Say</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default2Say</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]Sayer&#123;</span><br><span class="line"><span class="string">&quot;default1&quot;</span>:   SayFunc(DefaultSay1),</span><br><span class="line">    <span class="string">&quot;default2&quot;</span>:   SayFunc(DefaultSay2),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经典实现"><a href="#经典实现" class="headerlink" title="经典实现"></a>经典实现</h2><p>Golang 标准库提供 net&#x2F;http 包里关于 Handler 的实现是比较经典的实现</p><p>http.Handle 函数需要传入两个参数，第一个参数 pattern 是请求路由，第二个参数是一个 interface，需要我们提供一个实现 Handler 接口的值。<br>假设我们需要实现一个计数器，我们可以这样实现</p><ol><li>先定义计数器类型</li><li>实现 Handler 接口</li><li>作为参数传给 http.Handle</li></ol><p>但是，大多数情况下，我们只想要为每个请求路由提供一个处理函数，而不是先定义一个类型，所幸的是 net&#x2F;http 里面定义一个函数类型 HandlerFunc，它实现了 ServeHTTP 接口，并在实现里面回调自己，所以我们可以直接实现处理函数，然后作为参数传递给 http.Handle<br>的时候，用 HandlerFunc 类型转换一下即可</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何制作 NFT</title>
      <link href="/make-nft/"/>
      <url>/make-nft/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记</p></blockquote><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> NFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取 ETH</title>
      <link href="/get-eth/"/>
      <url>/get-eth/</url>
      
        <content type="html"><![CDATA[<blockquote><p>获取 ETH 教程</p></blockquote><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统 CentOS 8</li><li>安装 CUDA<br><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=8&amp;target_type=rpm_local">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=8&amp;target_type=rpm_local</a></li></ul><h2 id="矿池-F2Pool"><a href="#矿池-F2Pool" class="headerlink" title="矿池 F2Pool"></a>矿池 F2Pool</h2><ul><li>注册账户</li><li>添加挖矿账号</li><li>添加钱包地址</li></ul><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><ul><li>安装 Realm<br><a href="https://github.com/zhboner/realm">https://github.com/zhboner/realm</a></li><li>启动 Realm</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./realm -l 0.0.0.0:16688 -r eth.f2pool.com:6688 &gt; tmp 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="工具-Bminer"><a href="#工具-Bminer" class="headerlink" title="工具 Bminer"></a>工具 Bminer</h2><ul><li>下载<br><a href="https://www.bminer.me/">https://www.bminer.me/</a></li><li>上传服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz bminer-v16.4.11-2849b5c-amd64.tar.xz</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvJf bminer-v16.4.11-2849b5c-amd64.tar.xz</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./bminer -uri ethstratum://&lt;F2Pool 账号&gt;.&lt;矿工名&gt;@&lt;proxy IP&gt;:port &gt; temp 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 代码规范</title>
      <link href="/go-standard/"/>
      <url>/go-standard/</url>
      
        <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>golangci-lint: 静态代码检查工具</li><li>gofmt: 代码格式化工具</li><li>goimports: 引用管理工具</li></ul><span id="more"></span><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul><li>一行代码不要超过 120 列</li></ul><h3 id="括号和空格"><a href="#括号和空格" class="headerlink" title="括号和空格"></a>括号和空格</h3><ul><li>运算符和操作数之间要留空格</li><li>作为输入参数或者数组下标时，运算符和运算数之间不需要空格，紧凑展示</li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li>对引用包分组管理，分为标准包、内部包、第三方包、匿名包</li><li>不要使用相对路径引入包</li></ul><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><ul><li>error 作为函数的值返回，必须处理，且必须是最后一个参数</li><li>单个参数为 error 采用局部变量</li><li>错误描述不需要标点结尾，且全部小写</li><li>采用独立的错误流进行处理</li><li>错误返回的判断独立处理，不与其他变量组合逻辑判断</li><li>对于不需要格式化的错误，生成方式为：errors.New(“xxxx”)</li><li>格式化错误，error 生成方式为：fmt.Errorf(“module xxx: %w”, err)</li></ul><h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><ul><li>在业务逻辑处理中禁止使用 panic</li><li>在 main 包中使用 log.Fatal 来记录错误</li><li>panic 捕获只能到 goroutine 最顶层，每个自行启动的 goroutine，必须在入口处捕获 panic，并打印详细堆栈信息或进行其它处理</li></ul><h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><ul><li>必须在 defer 中使用，一般用来捕获程序运行期间发生异常抛出的 panic 或程序主动抛出的 panic</li></ul><h3 id="assertion"><a href="#assertion" class="headerlink" title="assertion"></a>assertion</h3><ul><li>type assertion 的单个返回值形式针对不正确的类型将产生 panic。因此，请始终使用 “comma ok” 的惯用法</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>包注释 <code>// Package 包名 包信息描述</code></li><li>方法注释 <code>// 函数名 函数信息描述</code></li><li>结构体注释 <code>// 结构体名 结构体信息描述</code></li><li>变量和常量注释 <code>// 变量名 变量信息描述</code></li><li>类型注释 <code>// 类型名 类型信息描述</code></li></ul><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>不要使用无意义或意义太宽泛的命名</li><li>包命名: 保持 package 的名字和目录一致, 包名应该为小写单词，不要使用下划线或者混合大小写，使用多级目录来划分层级</li><li>文件命名: 文件名应该采用小写，并且使用下划线分割各个单词</li><li>结构体: 采用驼峰命名方式, 结构体名应该是名词或名词短语, 结构体的声明和初始化格式采用多行</li><li>接口命名: 采用驼峰命名方式, 单个函数的接口名以 er 作为后缀, 两个函数的接口名综合两个函数名</li><li>变量命名: 必须遵循驼峰式, 专有名词保持原样</li><li>常量命名: 必须遵循驼峰式, 专有名词保持原样</li><li>函数命名: 必须遵循驼峰式, 专有名词保持原样</li></ul><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><ul><li>if 建立局部变量</li><li>if 变量在左，常量在右</li><li>if bool 直接判断，不需要等号</li><li>for 建立局部变量</li><li>range 如果只需要第一项（key），就丢弃第二个</li><li>range 如果只需要第二项，则把第一项置为下划线</li><li>switch 要求必须有 default</li><li>return 尽早 return，一旦有错误发生，马上返回</li><li>goto 业务代码禁止使用 goto</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>参数数量均不能超过 5 个</li><li>尽量用值传递，非指针传递</li><li>传入参数是 map，slice，chan，interface 不要传递指针</li></ul><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><ul><li>当存在资源管理时，应紧跟 defer 函数进行资源的释放</li><li>判断是否有错误发生之后，再 defer 释放资源</li><li>禁止在循环中使用 defer</li></ul><h3 id="方法的接收器"><a href="#方法的接收器" class="headerlink" title="方法的接收器"></a>方法的接收器</h3><ul><li>推荐以类名第一个英文首字母的小写作为接收器的命名</li></ul><h3 id="代码行数"><a href="#代码行数" class="headerlink" title="代码行数"></a>代码行数</h3><ul><li>文件长度不能超过 800 行</li><li>函数长度不能超过 80 行</li></ul><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><ul><li>嵌套深度不能超过 4 层</li></ul><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>变量声明尽量放在变量第一次使用前面，就近原则</li></ul><h3 id="魔法数字"><a href="#魔法数字" class="headerlink" title="魔法数字"></a>魔法数字</h3><ul><li>如果魔法数字出现超过 2 次，则禁止使用，用一个常量代替</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/golang/go/wiki/CodeReviewComments">CodeReviewComments</a></li><li>Effective Go</li><li>CodeReviewComments</li><li>CommonMistakes</li><li>The Go Blog</li><li>Uber Go Style Guide</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次排查 React 应用跑满 CPU 问题</title>
      <link href="/react-high-load/"/>
      <url>/react-high-load/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一般来说，跑满 CPU 大部分都是程序陷入了死循环，优先朝着这个方向进行排查</p></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>近期有同事反馈说，线上 React 应用把 CPU 跑满了，我打开页面同时打开 Chrome 的任务管理器一看，确实 CPU 跑到 100% 以上。</p><p><img src="/react-high-load/task-manager.png"></p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>随即打开开发者工具，切换到源代码 Tab，点击暂停脚本执行，发现调用堆栈重复调用 onmessage 和 postMessage 两个函数。</p><p><img src="/react-high-load/stack.png"></p><p>进一步点击单步调试，发现程序在项目代码和 Chrome 扩展来回执行，猜想是不是由于 Chrome 扩展导致的死循环？</p><p>我重新用无痕模式打开页面，同时关注任务管理器，发现 CPU 是正常的，尝试在控制台执行 <code>window.postMessage(&quot;hh&quot;, &quot;*&quot;)</code>，发现 CPU 跑上来了，看起来像是 Chrome 扩展执行了 window.postMessage 函数触发应用某段死循环代码。</p><p>React 应用本身没有监听 message 这个事件，猜想是不是引用的依赖库监听 message 事件导致？</p><p>把代码拉到本地运行起来，通过无痕模式打开页面，依旧在控制台执行 <code>window.postMessage(&quot;hh&quot;, &quot;*&quot;)</code>，发现 CPU 跑上去了，点击暂停脚本执行，程序停止在 index.worker.js 这个文件。</p><p><img src="/react-high-load/source.png"></p><p>通过阅读代码，我们发现，这是一段会造成死循环的代码，onmesage 里面又调用 postMessage，相当于自己监控 message 事件，自己同时也发送 message 消息。</p><p>这段代码出自 @antv&#x2F;algorithm 这个库，本身是 avtv 内置的常用的图算法 JS 实现，提供给 G6 及 Graphin 用于图分析场景使用。</p><p>React 应用本身没有直接依赖这个库，通过 package.json 文件发现，应用直接依赖 @antv&#x2F;g6 库，而这个库依赖链如下</p><ol><li>@antv&#x2F;g6-pc</li><li>@antv&#x2F;g6-core</li><li>@antv&#x2F;algorithm</li></ol><p>@antv&#x2F;algorithm 的版本是 <code>0.1.8-beta.5</code>，从 node_modules 里面查看 index.worker.js 的实现，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import * as algorithm from &#x27;./algorithm&#x27;;</span><br><span class="line">import &#123; MESSAGE &#125; from &#x27;./constant&#x27;;</span><br><span class="line">var ctx = self;</span><br><span class="line"></span><br><span class="line">ctx.onmessage = function (event) &#123;</span><br><span class="line">  var _a = event.data,</span><br><span class="line">      type = _a.type,</span><br><span class="line">      data = _a.data;</span><br><span class="line"></span><br><span class="line">  if (typeof algorithm[type] === &#x27;function&#x27;) &#123;</span><br><span class="line">    var result = algorithm[type].apply(algorithm, data);</span><br><span class="line">    ctx.postMessage(&#123;</span><br><span class="line">      type: MESSAGE.SUCCESS,</span><br><span class="line">      data: result</span><br><span class="line">    &#125;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.postMessage(&#123;</span><br><span class="line">    type: MESSAGE.FAILURE</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;; // https://stackoverflow.com/questions/50210416/webpack-worker-loader-fails-to-compile-typescript-worker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default null;</span><br></pre></td></tr></table></figure><p>从源码可知，如果其他地方执行过 window.postMessage 的话，这段代码会陷入死循环。</p><p>从 github 访问 @antv&#x2F;algorithm 最新版本的实现，发现已经 fix 这个问题，新版本改用 TypeScript，index.worker.ts 代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import * as algorithm from &#x27;./algorithm&#x27;;</span><br><span class="line">import &#123; MESSAGE &#125; from &#x27;./constant&#x27;;</span><br><span class="line"></span><br><span class="line">const ctx: Worker = (typeof self !== &#x27;undefined&#x27;) ? self : &#123;&#125; as any;</span><br><span class="line"></span><br><span class="line">interface Event &#123;</span><br><span class="line">  type: string;</span><br><span class="line">  data: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.onmessage = (event: Event) =&gt; &#123;</span><br><span class="line">  const &#123; _algorithmType, data &#125; = event.data;</span><br><span class="line">  // 如果发送内容没有私有类型。说明不是自己发的。不管</span><br><span class="line">  // fix: https://github.com/antvis/algorithm/issues/25</span><br><span class="line">  if(!_algorithmType)&#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  if (typeof algorithm[_algorithmType] === &#x27;function&#x27;) &#123;</span><br><span class="line">    const result = algorithm[_algorithmType](...data);</span><br><span class="line">    ctx.postMessage(&#123; _algorithmType: MESSAGE.SUCCESS, data: result &#125;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.postMessage(&#123; _algorithmType: MESSAGE.FAILURE &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// https://stackoverflow.com/questions/50210416/webpack-worker-loader-fails-to-compile-typescript-worker</span><br><span class="line">export default null as any;</span><br></pre></td></tr></table></figure><p>代码注释里面有个 issue 的链接，点击跳转过去，该 issue 确实也是反馈这段代码会陷入死循环，链接如下：<br><a href="https://github.com/antvis/algorithm/blob/master/packages/graph/src/workers/index.worker.ts">https://github.com/antvis/algorithm/blob/master/packages/graph/src/workers/index.worker.ts</a><br><img src="/react-high-load/issue.png"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>奇怪的是，陷入死循环，为什么页面不会卡死，还能响应点击等其他事件<br>这里的问题出在 window.onmessage 里面调用 window.postMessage，而事件监听是异步，其他事件是可以获得执行时间的，不像一般的逻辑死循环，例如 for、while、递归这种，整个执行线程都被占用</li><li>Chrome 扩展为什么会调用 postMessage？<br>通过阅读 Chrome 扩展文档，了解到页面和扩展是可以使用 window.postMessage 通信的<br><a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#host-page-communication">https://developer.chrome.com/docs/extensions/mv3/content_scripts/#host-page-communication</a></li><li>在实现事件监听回调的时候，如果有必要再触发事件本身，提前对事件消息进行校验，避免响应非自身触发的事件</li><li>在保持兼容的情况，尽量使用最新版本的库，新版本一般会伴随着修复旧版本的 Bug</li><li>开发者在使用第三方库的时候，不能因为库流行或者是大厂开源就完全信赖，还是要对依赖库有更深入的了解，防止 Bug 产生</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法导论之动态规划笔记</title>
      <link href="/dp/"/>
      <url>/dp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第三版 算法导论 - 第四部分 高级设计和分析技术 - 第 15 章 动态规划</p></blockquote> <span id="more"></span><p><img src="/images/dp.png" alt="image alt text"></p><ol><li><p>概念</p><ul><li>通过组合子问题的解求解原问题</li><li>存在子问题重叠的情况</li><li>保存子问题的解&#x2F;值</li><li>求解最优化问题，存在最优值以及可能多个最优解</li></ul></li><li><p>步骤</p><ol><li>刻画一个最优解的结构特征</li><li>递归地定义最优解的值</li><li>计算最优解的值，通常采用自底向上的方法</li><li>利用计算出的信息构造出一个最优解</li></ol></li><li><p>要素</p><ul><li>最优子结构<ul><li>问题的最优解由相关子问题的最优解组成</li><li>子问题是无关的，子问题可以独立求解</li><li>通用模式<ol><li>做出一个选择</li><li>假定这个选择得到最优解</li><li>这次选择会产生子问题以及如何最好地刻画子问题空间</li><li>用反证法证明每个字问题的解就是它本身的最优解</li></ol></li><li>不同问题最优子结构的区别<ul><li>原问题的最优解涉及多少个子问题</li><li>在确定最优解使用哪些子问题时，需要考察多少种选择</li></ul></li><li>运行时间: 子问题的总数和每个子问题需要考察多少种选择的乘积</li></ul></li><li>子问题重叠<ul><li>不同子问题的总数是输入规模的多项式函数</li><li>递归算法反复求解相同的子问题</li></ul></li></ul></li><li><p>思想</p><ul><li>时空权衡，利用空间换取时间</li></ul></li><li><p>实现</p><ul><li>带备忘的自顶向下法, 不需要求解所有子问题</li><li>清楚子问题规模的自底向上法, 没有递归开销</li></ul></li><li><p>子问题图 G &#x3D; ( V, E )</p><ul><li>顶点: 每个顶点唯一对应一个子问题</li><li>边: 有向边，表示当前问题最优解依赖子问题的最优解</li><li>动态规划的运行时间跟图的规模呈线性相关, 即跟顶点和边的数量呈线性相关</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初始化 Git</title>
      <link href="/init-git/"/>
      <url>/init-git/</url>
      
        <content type="html"><![CDATA[<p>初始化 Git 的一般步骤。</p><span id="more"></span><h1 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Firstname lastname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure><p>配置信息保存在 “~&#x2F;.gitconfig” 文件里</p><h1 id="设置-SSH-Key"><a href="#设置-SSH-Key" class="headerlink" title="设置 SSH Key"></a>设置 SSH Key</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">Generation public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key</span><br><span class="line">(/Users/your_user_directory/.ssh/id_rsa):  <span class="comment">#按回车键</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):  <span class="comment">#输入密码</span></span><br><span class="line">Enter same passphrase again:  <span class="comment">#再次输入密码</span></span><br></pre></td></tr></table></figure><p>id_rsa 文件是私有密钥，id_rsa.pub 是公开密钥</p><h1 id="添加公开密钥"><a href="#添加公开密钥" class="headerlink" title="添加公开密钥"></a>添加公开密钥</h1><ol><li>点击账户设定按钮（Settings）</li><li>选择  SSH  and   GPG  keys</li><li>点击 New SSH key</li><li>Title 输入密钥名称</li><li>Key 粘贴 id_rsa.pub 内容</li><li>收到提示“公共密钥添加完成“的邮件</li><li>认证和通信 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 出现如下结果即为成功</span></span><br><span class="line">Hi hirocastest!You<span class="string">&#x27;ve successfully authenticated,but GitHub does no provide shell access.</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/blog/"/>
      <url>/blog/</url>
      
        <content type="html"><![CDATA[<p>学习用 Hexo + Github Pages 搭建个人博客,并通过自己的域名访问博客.</p><span id="more"></span><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><h2 id="安装-nvm-和-Node-js"><a href="#安装-nvm-和-Node-js" class="headerlink" title="安装 nvm 和 Node.js"></a>安装 nvm 和 Node.js</h2><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -g 全局安装</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有指定文件夹将会在当前文件夹新建所需要的文件</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># layout</span></span><br><span class="line"><span class="comment">#  - post default</span></span><br><span class="line"><span class="comment">#  - page</span></span><br><span class="line"><span class="comment">#  - draft</span></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 清除缓存文件和已生成的静态文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署网站</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h1 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h1><h2 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="comment"># 注意冒号后空格</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">网站描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">语言</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">网址</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./themes/next/_config.yml</span></span><br><span class="line"><span class="comment"># 修改外观</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"><span class="comment"># 设置菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="comment"># 设置头像</span></span><br><span class="line"><span class="comment"># source/images/logo.jpg</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/logo.jpg</span></span><br><span class="line"><span class="comment"># 设置背景动画</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置侧边栏</span></span><br><span class="line"><span class="attr">display:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加标签页面</span></span><br><span class="line">hexo new page tags</span><br><span class="line"><span class="comment"># 添加分类页面</span></span><br><span class="line">hexo new page categories</span><br><span class="line"><span class="comment"># 添加关于页面</span></span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><h3 id="设置页面类型"><a href="#设置页面类型" class="headerlink" title="设置页面类型"></a>设置页面类型</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># source/tags/index.md</span></span><br><span class="line"></span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"></span><br><span class="line"><span class="section"># source/categories/index.md</span></span><br><span class="line"></span><br><span class="line">title: 分类</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"></span><br><span class="line"><span class="section"># source/about/index.md</span></span><br><span class="line"></span><br><span class="line">title: 关于我</span><br><span class="line">type: &quot;about&quot;</span><br></pre></td></tr></table></figure><h1 id="部署-Git"><a href="#部署-Git" class="headerlink" title="部署 Git"></a>部署 Git</h1><h2 id="Github-创建仓库"><a href="#Github-创建仓库" class="headerlink" title="Github 创建仓库"></a>Github 创建仓库</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 格式必需</span></span><br><span class="line"></span><br><span class="line">Repository name: <span class="language-xml"><span class="tag">&lt;<span class="name">accountName</span>&gt;</span></span>.github.io</span><br><span class="line"></span><br><span class="line"><span class="section"># 描述非必需</span></span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line"><span class="section"># 权限必需</span></span><br><span class="line"></span><br><span class="line">public</span><br><span class="line"></span><br><span class="line"><span class="section"># initialize 非必需</span></span><br><span class="line"></span><br><span class="line">initialize this repository with a README</span><br></pre></td></tr></table></figure><h2 id="安装-hexo-deploer-git"><a href="#安装-hexo-deploer-git" class="headerlink" title="安装 hexo-deploer-git"></a>安装 hexo-deploer-git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deploer-git --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml 站点配置文件</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br></pre></td></tr></table></figure><h2 id="添加-README-md"><a href="#添加-README-md" class="headerlink" title="添加 README.md"></a>添加 README.md</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./public/</span></span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">vim README.md</span><br></pre></td></tr></table></figure><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主机记录: 域名</span><br><span class="line">记录类型: CNAME</span><br><span class="line">记录值: <span class="language-xml"><span class="tag">&lt;<span class="name">accountName</span>&gt;</span></span>.github.io</span><br></pre></td></tr></table></figure><h2 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./source</span></span><br><span class="line"><span class="built_in">echo</span> blog.orzcn.cn &gt; CNAME</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Front-matter 是文件最上方以 --- 分隔的区域,用来指定个别文件的变量</span></span><br><span class="line"></span><br><span class="line">title: 标题</span><br><span class="line">date: 建立日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">tags: 标签</span><br><span class="line">categories: 分类</span><br></pre></td></tr></table></figure><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 上方的文字作为文章的摘要</span></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="添加-Local-Search"><a href="#添加-Local-Search" class="headerlink" title="添加 Local Search"></a>添加 Local Search</h2><ol><li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ol><li>编辑站点配置文件，新增以下内容到任意位置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><ol><li>编辑主题配置文件，启用本地搜索功能</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
